SELECT
  'DROP TABLE '
  || TABLE_NAME
  || ' CASCADE CONSTRAINTS;'
FROM
  USER_TABLES;

DROP TABLE ORGANIZERS CASCADE CONSTRAINTS;

DROP TABLE SEATS CASCADE CONSTRAINTS;

DROP TABLE EVENTS CASCADE CONSTRAINTS;

DROP TABLE TICKETS CASCADE CONSTRAINTS;

DROP TABLE PERFORMER_TYPE CASCADE CONSTRAINTS;

DROP TABLE COUNTRIES CASCADE CONSTRAINTS;

DROP TABLE LOCATIONS CASCADE CONSTRAINTS;

DROP TABLE VENUES CASCADE CONSTRAINTS;

DROP TABLE PERFORMERS CASCADE CONSTRAINTS;

DROP TABLE EVENT_CATEGORY CASCADE CONSTRAINTS;

DROP TABLE EVENTS CASCADE CONSTRAINTS;

DROP TABLE TICKETS CASCADE CONSTRAINTS;

DROP TABLE TICKET_TYPE CASCADE CONSTRAINTS;

DROP TABLE SEATS CASCADE CONSTRAINTS;

DROP TABLE USERS CASCADE CONSTRAINTS;

DROP TABLE TRANSACTIONS CASCADE CONSTRAINTS;

DROP TABLE BOOKINGS CASCADE CONSTRAINTS;

DROP TABLE PERFORMER_TYPE_A CASCADE CONSTRAINTS;

DROP TABLE PERFORMER_TYPE_B CASCADE CONSTRAINTS;

DROP SEQUENCE EVENT_ID_SEQ;

DROP TRIGGER BOOKINGS_PROCEDURE;

CREATE SEQUENCE VENUE_ID_SEQ INCREMENT BY 1 START WITH 1;

DROP SEQUENCE VENUE_ID_SEQ;

CREATE SEQUENCE TICKET_ID_SEQ;

DROP SEQUENCE EVENT_ID_SEQ;

CREATE SEQUENCE EVENT_ID_SEQ INCREMENT BY 1 START WITH 1;

CREATE TABLE COUNTRIES (
  COUNTRY_ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
  COUNTRY_NAME VARCHAR(255) NOT NULL
);

CREATE TABLE LOCATIONS (
  LOCATION_ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
  LOCATION_NAME VARCHAR(255) NOT NULL,
  COUNTRY_ID INT NOT NULL,
  CONSTRAINT LOCATION_COUNTRY_FK FOREIGN KEY (COUNTRY_ID) REFERENCES COUNTRIES (COUNTRY_ID)
);

CREATE TABLE EVENT_CATEGORY (
  EVENT_CATEGORY_ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
  EVENT_CATEGORY_NAME VARCHAR2(255) NOT NULL
);

CREATE TABLE TICKET_TYPE(
  TICKET_TYPE_ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
  TICKET_TYPE_NAME VARCHAR2(255) NOT NULL,
  TICKET_TYPE INT NOT NULL
);

SELECT
  *
FROM
  TICKET_TYPE;

CREATE TABLE ORGANIZERS (
  ORGANIZER_ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
  ORGANIZER_NAME VARCHAR2(255) NOT NULL,
  USERNAME VARCHAR2(255),
  EMAIL VARCHAR2(255) CHECK (EMAIL LIKE '%@%'),
  PHONE_NUMBER VARCHAR2(15),
  PASSWORD VARCHAR2(255) CHECK (LENGTH(PASSWORD) > 5)
);

CREATE TABLE PERFORMER_TYPE (
  PERFORMER_TYPE_ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
  TYPE_NAME VARCHAR(255) NOT NULL
);

CREATE TABLE PERFORMERS (
  PERFORMER_ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
  PERFORMER_NAME VARCHAR(255),
  PERFORMER_TYPE INT NOT NULL,
  CONSTRAINT PERFORMER_TYPE_FK FOREIGN KEY (PERFORMER_TYPE) REFERENCES PERFORMER_TYPE (PERFORMER_TYPE_ID)
);

CREATE TABLE VENUES (
  VENUE_ID INT PRIMARY KEY,
  VENUE_NAME VARCHAR(255) NOT NULL,
  VENUE_CAPACITY INT NOT NULL,
  NUM_OF_PIT_SEATS INT NOT NULL,
  NUM_OF_GENERAL_SEATS INT NOT NULL,
  NUM_OF_BALCONY_SEATS INT NOT NULL,
  LOCATION_ID INT NOT NULL,
  CONSTRAINT LOCATION_FK FOREIGN KEY (LOCATION_ID) REFERENCES LOCATIONS (LOCATION_ID)
);

INSERT INTO VENUES (
  VENUE_NAME,
  VENUE_CAPACITY,
  NUM_OF_PIT_SEATS,
  NUM_OF_GENERAL_SEATS,
  NUM_OF_BALCONY_SEATS,
  LOCATION_ID
) VALUES (
  'Stadium',
  10,
  5,
  3,
  2,
  1
);

SELECT
  *
FROM
  VENUES;

SELECT
  *
FROM
  SEATS;

CREATE TABLE SEAT_TYPE (
  SEAT_TYPE_ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
  SEAT_TYPE_NAME VARCHAR(255) NOT NULL
);

CREATE TABLE SEATS (
  SEAT_NUM INT,
  SEAT_TYPE INT NOT NULL,
  VENUE_ID INT NOT NULL,
  BOOKED CHAR(1) NOT NULL,
  PRIMARY KEY (SEAT_NUM, VENUE_ID),
  CONSTRAINT SEATVENUE_FK FOREIGN KEY (VENUE_ID) REFERENCES VENUES (VENUE_ID),
  CONSTRAINT SEAT_TYPE_FK FOREIGN KEY (SEAT_TYPE) REFERENCES SEAT_TYPE (SEAT_TYPE_ID)
);

CREATE TABLE EVENTS (
  EVENT_ID INT PRIMARY KEY,
  EVENT_NAME VARCHAR(255) NOT NULL,
  VENUE_ID INT NOT NULL,
  EVENT_DATE VARCHAR(255) NOT NULL CHECK (EVENT_DATE LIKE '__-__-____'),
  START_TIME VARCHAR(10) NOT NULL,
  END_TIME VARCHAR(10) NOT NULL,
  ORGANIZER_ID INT NOT NULL,
  PERFORMER_ID INT NOT NULL,
  EVENT_CATEGORY_ID INT NOT NULL,
  NUM_OF_TICKETS INT NOT NULL,
  NUM_OF_VIP_TICKETS INT NOT NULL,
  CONSTRAINT EVENT_VENUE_FK FOREIGN KEY (VENUE_ID) REFERENCES VENUES (VENUE_ID),
  CONSTRAINT EVENT_ORGANIZER_FK FOREIGN KEY (ORGANIZER_ID) REFERENCES ORGANIZERS (ORGANIZER_ID),
  CONSTRAINT EVENT_PERFORMER_FK FOREIGN KEY (PERFORMER_ID) REFERENCES PERFORMERS (PERFORMER_ID),
  CONSTRAINT EVENT_CATEGORY_FK FOREIGN KEY (EVENT_CATEGORY_ID) REFERENCES EVENT_CATEGORY (EVENT_CATEGORY_ID)
);

CREATE TABLE TICKET_TYPE (
  TICKET_TYPE_ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
  TICKET_TYPE_NAME VARCHAR(255)
);

CREATE TABLE TICKETS (
  TICKET_ID INT,
  EVENT_ID INT NOT NULL,
  TICKET_TYPE INT NOT NULL,
  SEAT_NUM INT NOT NULL,
  VENUE_ID INT NOT NULL,
  BOOKED CHAR(1),
  PRIMARY KEY (TICKET_ID, EVENT_ID),
  CONSTRAINT TICKETS_EVENT_FK FOREIGN KEY (EVENT_ID) REFERENCES EVENTS (EVENT_ID),
  CONSTRAINT TICKETS_VENUE_FK FOREIGN KEY (VENUE_ID) REFERENCES VENUES (VENUE_ID),
  CONSTRAINT TICKETS_SEAT_NUM_FK FOREIGN KEY (SEAT_NUM, VENUE_ID) REFERENCES SEATS (SEAT_NUM, VENUE_ID),
  CONSTRAINT TICKETS_TICKET_TYPE_FK FOREIGN KEY (TICKET_TYPE) REFERENCES TICKET_TYPE (TICKET_TYPE_ID)
);

CREATE TABLE USERS(
  USER_ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
  USERNAME VARCHAR(255),
  EMAIL VARCHAR(255) CHECK (EMAIL LIKE '%@%'),
  PHONE_NUMBER INT CHECK (LENGTH(PHONE_NUMBER)<16),
  PASSWORD VARCHAR(255) CHECK (LENGTH(PASSWORD)>5),
  CITY_STATE_COUNTRY VARCHAR(255),
  NUM_OF_TICKETS_BOOKED INT
);

CREATE TABLE BOOKINGS(
  TICKET_ID INT,
  EVENT_ID INT,
  USER_ID INT,
  TICKET_TYPE INT,
  PRIMARY KEY(USER_ID, TICKET_ID),
  CONSTRAINT FK_TICKET_EVENT_ID FOREIGN KEY (TICKET_ID, EVENT_ID) REFERENCES TICKETS(TICKET_ID, EVENT_ID),
  CONSTRAINT FK_USER_ID FOREIGN KEY(USER_ID) REFERENCES USERS(USER_ID)
);

--PROCEDURES
SET SERVEROUTPUT ON;

CREATE OR REPLACE TRIGGER BOOKINGS_PROCEDURE BEFORE
  INSERT ON BOOKINGS FOR EACH ROW
DECLARE
  NUM_OF_TICKS      INT;
  NUM_OF_VIP_TICKS  INT;
  NUM_OF_BOOKED_VIP INT;
  NUM_OF_BOOKED_GEN INT;
BEGIN
 -- Retrieve number of tickets and VIP tickets
  SELECT
    NUM_OF_TICKETS,
    NUM_OF_VIP_TICKETS INTO NUM_OF_TICKS,
    NUM_OF_VIP_TICKS
  FROM
    EVENTS
  WHERE
    EVENT_ID = :NEW.EVENT_ID;
  DBMS_OUTPUT.PUT_LINE('Number of tickets: '
                       || NUM_OF_TICKS);
  DBMS_OUTPUT.PUT_LINE('Number of VIP tickets: '
                       || NUM_OF_VIP_TICKS);
 -- Count booked VIP and general tickets
  SELECT
    COUNT(BOOKED) INTO NUM_OF_BOOKED_VIP
  FROM
    TICKETS
  WHERE
    TICKET_TYPE = 1
    AND BOOKED = 'y'
    AND EVENT_ID = :NEW.EVENT_ID;
  DBMS_OUTPUT.PUT_LINE('Number of booked VIP tickets: '
                       || NUM_OF_BOOKED_VIP);
  SELECT
    COUNT(BOOKED) INTO NUM_OF_BOOKED_GEN
  FROM
    TICKETS
  WHERE
    TICKET_TYPE = 0
    AND BOOKED = 'y'
    AND EVENT_ID = :NEW.EVENT_ID;
  DBMS_OUTPUT.PUT_LINE('Number of booked general tickets: '
                       || NUM_OF_BOOKED_GEN);
 -- Check conditions and update tickets and users
  IF :NEW.TICKET_TYPE = 1 THEN
    DBMS_OUTPUT.PUT_LINE('The type is VIP');
    IF NUM_OF_BOOKED_VIP < NUM_OF_VIP_TICKS THEN
      DBMS_OUTPUT.PUT_LINE('VIP tickets are available');
      UPDATE TICKETS
      SET
        BOOKED = 'y'
      WHERE
        TICKET_ID = :NEW.TICKET_ID
        AND EVENT_ID = :NEW.EVENT_ID
        AND TICKET_TYPE = 1
        AND ROWNUM = 1;
      UPDATE USERS
      SET
        NUM_OF_TICKETS_BOOKED = (
          NUM_OF_TICKETS_BOOKED + 1
        )
      WHERE
        USER_ID = :NEW.USER_ID;
      DBMS_OUTPUT.PUT_LINE('One VIP insertion');
    ELSE
      RAISE_APPLICATION_ERROR(-20001, 'No available VIP tickets');
    END IF;
  ELSIF :NEW.TICKET_TYPE = 0 THEN
    DBMS_OUTPUT.PUT_LINE('The type is general');
    IF NUM_OF_BOOKED_GEN < (NUM_OF_TICKS - NUM_OF_VIP_TICKS) THEN
      UPDATE TICKETS
      SET
        BOOKED = 'y'
      WHERE
        TICKET_ID = :NEW.TICKET_ID
        AND EVENT_ID = :NEW.EVENT_ID
        AND TICKET_TYPE = 0
        AND ROWNUM = 1;
      UPDATE USERS
      SET
        NUM_OF_TICKETS_BOOKED = (
          NUM_OF_TICKETS_BOOKED + 1
        )
      WHERE
        USER_ID = :NEW.USER_ID;
      DBMS_OUTPUT.PUT_LINE('One general insertion');
    ELSE
      RAISE_APPLICATION_ERROR(-20001, 'No available general tickets');
    END IF;
  END IF;
END;
/

CREATE OR REPLACE PROCEDURE CHECKER(
  INPUT_USER_ID INT
) AS
  USER_COUNT NUMBER;
BEGIN
  DBMS_OUTPUT.PUT_LINE('called.');
  SELECT
    COUNT(*) INTO USER_COUNT
  FROM
    USERS
  WHERE
    USER_ID = INPUT_USER_ID;
  IF USER_COUNT = 0 THEN
    RAISE_APPLICATION_ERROR(-20001, 'User with ID '
                                    || INPUT_USER_ID
                                    || ' does not exist.');
  ELSE
    DBMS_OUTPUT.PUT_LINE('LOGIN SUCCESSFUL!');
  END IF;
END CHECKER;
/

CREATE OR REPLACE PROCEDURE ORGCHECKER(
  INPUT_USER_ID INT
) AS
  USER_COUNT NUMBER;
BEGIN
  DBMS_OUTPUT.PUT_LINE('called.');
  SELECT
    COUNT(*) INTO USER_COUNT
  FROM
    ORGANIZERS
  WHERE
    ORGANIZER_ID = INPUT_USER_ID;
  IF USER_COUNT = 0 THEN
    RAISE_APPLICATION_ERROR(-20002, 'Organizer with ID '
                                    || INPUT_USER_ID
                                    || ' does not exist.');
  ELSE
    DBMS_OUTPUT.PUT_LINE('LOGIN SUCCESSFUL!');
  END IF;
END ORGCHECKER;
/

--autoincrement of events, it needs to be done in a sequence and not within the table itself because this trigger must occur before the trigger
--that creates the tickets, so it needs the event_ID and both occur before the row gets added in table.

--EVENT ID CONTROL
CREATE OR REPLACE TRIGGER EVENT_ID_CONTROL BEFORE
  INSERT ON EVENTS FOR EACH ROW
BEGIN
  SELECT
    EVENT_ID_SEQ.NEXTVAL INTO :NEW.EVENT_ID
  FROM
    DUAL;
END;
/

--VENUE_ID_CONTROL
CREATE OR REPLACE TRIGGER VENUE_ID_CONTROL BEFORE
  INSERT ON VENUES FOR EACH ROW
BEGIN
  SELECT
    VENUE_ID_SEQ.NEXTVAL INTO :NEW.VENUE_ID
  FROM
    DUAL;
END;
 --SEATS_AUTOINCREMENT
CREATE OR REPLACE TRIGGER SEATS_AUTOINCREMENT BEFORE INSERT ON SEATS FOR EACH ROW BEGIN
  SELECT
    COALESCE(MAX(SEAT_NUM), -1) + 1 INTO :NEW.SEAT_NUM
  FROM
    SEATS
  WHERE
    VENUE_ID = :NEW.VENUE_ID;
END;
CREATE OR REPLACE TRIGGER TICKET_ID_AUTO_INCREMENT BEFORE INSERT ON TICKETS FOR EACH ROW BEGIN
  SELECT
    COALESCE(MAX(TICKET_ID), -1) + 1 INTO :NEW.TICKET_ID
  FROM
    TICKETS
  WHERE
    EVENT_ID = :NEW.EVENT_ID;
END;
 --FILL SEATS
DROP TRIGGER FILL_SEATS;
CREATE OR REPLACE TRIGGER FILL_SEATS AFTER INSERT ON VENUES FOR EACH ROW DECLARE MAX_PIT_CAPACITY INT := :NEW.NUM_OF_PIT_SEATS;
MAX_GEN_CAPACITY INT := :NEW.NUM_OF_GENERAL_SEATS;
MAX_BALCONY_CAPACITY INT := :NEW.NUM_OF_BALCONY_SEATS;
BEGIN
  FOR I IN 1..MAX_PIT_CAPACITY LOOP
    INSERT INTO SEATS (
      SEAT_TYPE,
      VENUE_ID,
      BOOKED
    ) VALUES (
      1,
      :NEW.VENUE_ID,
      'n'
    );
  END LOOP;

  FOR I IN 1..MAX_GEN_CAPACITY LOOP
    INSERT INTO SEATS (
      SEAT_TYPE,
      VENUE_ID,
      BOOKED
    ) VALUES (
      2,
      :NEW.VENUE_ID,
      'n'
    );
  END LOOP;

  FOR I IN 1..MAX_BALCONY_CAPACITY LOOP
    INSERT INTO SEATS (
      SEAT_TYPE,
      VENUE_ID,
      BOOKED
    ) VALUES (
      3,
      :NEW.VENUE_ID,
      'n'
    );
  END LOOP;
END;

SELECT
  *
FROM
  SEATS;
 --TICKET SEAT NUM
CREATE OR REPLACE TRIGGER TICKET_SEAT_NUM BEFORE INSERT ON TICKETS FOR EACH ROW DECLARE V_SEAT_NUM INT;
BEGIN
  BEGIN
    SELECT
      SEAT_NUM INTO V_SEAT_NUM
    FROM
      SEATS
    WHERE
      VENUE_ID = :NEW.VENUE_ID
      AND BOOKED = 'n'
      AND ROWNUM = 1;
    IF V_SEAT_NUM IS NOT NULL THEN
      UPDATE SEATS
      SET
        BOOKED = 'y'
      WHERE
        SEAT_NUM = V_SEAT_NUM;
      :NEW.SEAT_NUM := V_SEAT_NUM;
      DBMS_OUTPUT.PUT_LINE('Seat assigned successfully: '
                           || V_SEAT_NUM);
    ELSE
      DBMS_OUTPUT.PUT_LINE('No available seat found for VENUE_ID '
                           || :NEW.VENUE_ID);
    END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('No available seat found for VENUE_ID '
                           || :NEW.VENUE_ID);
  END;
END;
 --TICKET CREATION TRIGGER
CREATE OR REPLACE TRIGGER TICKET_CREATION_TRIGGER AFTER INSERT ON EVENTS FOR EACH ROW DECLARE N INT := 0;
N2 INT := 0;
BEGIN
  WHILE N < :NEW.NUM_OF_VIP_TICKETS LOOP
    INSERT INTO TICKETS (
      EVENT_ID,
      TICKET_TYPE,
      VENUE_ID,
      BOOKED
    ) VALUES (
      :NEW.EVENT_ID,
      2,
      :NEW.VENUE_ID,
      'n'
    );
    N := N + 1;
  END LOOP;

  WHILE N2 < (:NEW.NUM_OF_TICKETS - :NEW.NUM_OF_VIP_TICKETS) LOOP
    INSERT INTO TICKETS (
      EVENT_ID,
      TICKET_TYPE,
      VENUE_ID,
      BOOKED
    ) VALUES (
      :NEW.EVENT_ID,
      1,
      :NEW.VENUE_ID,
      'n'
    );
    N2 := N2 + 1;
  END LOOP;
END;

SELECT
  *
FROM
  EVENTS;
UPDATE EVENTS
SET
  EVENT_ID = 1
WHERE
  EVENT_ID = 2;
SELECT
  *
FROM
  TICKETS;
DELETE FROM TICKETS
WHERE
  EVENT_ID = 2;
 --TICKET UPDATION TRIGGER
CREATE OR REPLACE TRIGGER TICKET_UPDATION_TRIGGER BEFORE
UPDATE ON EVENTS FOR EACH ROW DECLARE CURSOR NUM_OF_TICKS IS
SELECT
  TICKET_ID
FROM
  TICKETS
WHERE
  EVENT_ID = :NEW.EVENT_ID
ORDER BY
  TICKET_ID DESC; -- all tickets for that event
N1 INT := 0;
DELETE_COUNT INT := 0;
INSERT_COUNT INT := 0;
DIFF INT;
BEGIN
  SELECT
    COUNT(*) INTO N1
  FROM
    TICKETS
  WHERE
    EVENT_ID = :NEW.EVENT_ID; -- number of tickets already in the tickets table for this event
  DIFF := ABS(:OLD.NUM_OF_TICKETS - :NEW.NUM_OF_TICKETS);
  IF N1 > :NEW.NUM_OF_TICKETS THEN
    FOR TICKET_REC IN NUM_OF_TICKS LOOP
      DELETE FROM TICKETS
      WHERE
        TICKET_ID = TICKET_REC.TICKET_ID;
      DELETE_COUNT := DELETE_COUNT + 1;
      EXIT WHEN DELETE_COUNT = DIFF;
    END LOOP;
  END IF;

  IF N1 < :NEW.NUM_OF_TICKETS THEN
    FOR I IN 1..DIFF LOOP
      INSERT INTO TICKETS (
        EVENT_ID,
        TICKET_TYPE,
        VENUE_ID,
        BOOKED
      ) VALUES (
        :NEW.EVENT_ID,
        1,
        :NEW.VENUE_ID,
        'n'
      );
      INSERT_COUNT := INSERT_COUNT + 1;
      EXIT WHEN INSERT_COUNT = DIFF;
    END LOOP;
  END IF;
END;
/

--TOO MANY TICKETS
CREATE OR REPLACE TRIGGER TOO_MANY_TICKS BEFORE
  INSERT ON EVENTS FOR EACH ROW
DECLARE
  NOT_ENOUGH_SPACE EXCEPTION;
  MAXIMUM          INT;
BEGIN
  SELECT
    VENUE_CAPACITY INTO MAXIMUM
  FROM
    VENUES
  WHERE
    VENUE_ID = :NEW.VENUE_ID;
  IF :NEW.NUM_OF_TICKETS > MAXIMUM THEN
    RAISE NOT_ENOUGH_SPACE;
  END IF;
END;

INSERT INTO PERFORMER_TYPE (
  TYPE_NAME
) VALUES (
  'Musician'
);
INSERT INTO PERFORMER_TYPE (
  TYPE_NAME
) VALUES (
  'Comedian'
);
INSERT INTO PERFORMER_TYPE (
  TYPE_NAME
) VALUES (
  'Sports Team'
);
INSERT INTO PERFORMERS (
  PERFORMER_NAME,
  PERFORMER_TYPE
) VALUES (
  'The Strokes',
  1
);
INSERT INTO VENUES (
  VENUE_NAME,
  VENUE_CAPACITY,
  NUM_OF_PIT_SEATS,
  NUM_OF_GENERAL_SEATS,
  NUM_OF_BALCONY_SEATS,
  LOCATION_ID
) VALUES (
  'Yankee Stadium',
  700,
  5,
  5,
  5,
  1
);
INSERT INTO VENUES (
  VENUE_NAME,
  VENUE_CAPACITY,
  NUM_OF_PIT_SEATS,
  NUM_OF_GENERAL_SEATS,
  NUM_OF_BALCONY_SEATS,
  LOCATION_ID
) VALUES (
  'Met Museum',
  10,
  2,
  3,
  5,
  2
);
INSERT INTO VENUES (
  VENUE_NAME,
  VENUE_CAPACITY,
  NUM_OF_PIT_SEATS,
  NUM_OF_GENERAL_SEATS,
  NUM_OF_BALCONY_SEATS,
  LOCATION_ID
) VALUES (
  'IBA',
  100,
  5,
  5,
  5,
  1
);
INSERT INTO VENUES (
  VENUE_NAME,
  VENUE_CAPACITY,
  NUM_OF_PIT_SEATS,
  NUM_OF_GENERAL_SEATS,
  NUM_OF_BALCONY_SEATS,
  LOCATION_ID
) VALUES (
  'LUMS',
  200,
  5,
  5,
  5,
  4
);
INSERT INTO SEAT_TYPE (
  SEAT_TYPE_NAME
) VALUES (
  'pit'
);
INSERT INTO SEAT_TYPE (
  SEAT_TYPE_NAME
) VALUES (
  'general'
);
INSERT INTO SEAT_TYPE (
  SEAT_TYPE_NAME
) VALUES (
  'balcony'
);
INSERT INTO EVENTS (
  EVENT_NAME,
  VENUE_ID,
  EVENT_DATE,
  START_TIME,
  END_TIME,
  ORGANIZER_ID,
  PERFORMER_ID,
  EVENT_CATEGORY_ID,
  NUM_OF_TICKETS,
  NUM_OF_VIP_TICKETS
) VALUES (
  'Strokes Concert',
  1,
  '12-10-2002',
  '9pm',
  '10pm',
  4,
  1,
  1,
  10,
  5
);
SELECT
  *
FROM
  EVENTS;
INSERT INTO EVENTS (
  EVENT_NAME,
  VENUE_ID,
  EVENT_DATE,
  START_TIME,
  END_TIME,
  ORGANIZER_ID,
  PERFORMER_ID,
  EVENT_CATEGORY_ID,
  NUM_OF_TICKETS,
  NUM_OF_VIP_TICKETS
) VALUES (
  'MET Gala',
  2,
  '01-01-2023',
  '18:00',
  '22:00',
  1,
  1,
  1,
  6,
  5
);
SELECT
  *
FROM
  ORGANIZERS;
INSERT INTO BOOKINGS (
  USER_ID,
  TICKET_ID,
  EVENT_ID,
  TICKET_TYPE
) VALUES (
  1,
  1,
  46,
  1
);
SELECT
  *
FROM
  EVENTS;
SELECT
  COUNT(*)
FROM
  TICKETS
WHERE
  EVENT_ID = 81
  AND BOOKED = 'n';
SELECT
  *
FROM
  TICKETS;
SELECT
  E.EVENT_NAME,
  E.EVENT_DATE,
  V.VENUE_NAME,
  P.PERFORMER_NAME
FROM
  EVENTS E,
  PERFORMERS P,
  VENUES V
WHERE
  E.EVENT_ID =81
  AND
WHERE
  E.PERFORMER_ID = P.PERFORMER_ID
  AND
WHERE
  E.VENUE_ID = V.VENUE_ID;
UPDATE EVENTS
SET
  EVENT_NAME = 'SuperBowl',
  VENUE_ID = '1',
  EVENT_DATE =:3,
  START_TIME = :4,
  END_TIME =:5,
  ORGANIZER_ID =:6,
  PERFORMER_ID = :7,
  EVENT_CATEGORY_ID =:8,
  NUM_OF_TICKETS =:9,
  NUM_OF_VIP_TICKETS =:10
WHERE
  EVENT_ID = :11 DELETE FROM BOOKINGS
WHERE
  TICKET_ID = 0;
SELECT
  E.EVENT_ID,
  E.EVENT_NAME,
  V.VENUE_NAME,
  P.PERFORMER_NAME,
  EC.EVENT_CATEGORY_NAME,
  L.LOCATION_NAME,
  C.COUNTRY_NAME
FROM
  EVENTS E
  INNER JOIN VENUES V
  ON E.VENUE_ID = V.VENUE_ID
  INNER JOIN PERFORMERS P
  ON E.PERFORMER_ID = P.PERFORMER_ID
  INNER JOIN EVENT_CATEGORY EC
  ON E.EVENT_CATEGORY_ID = EC.EVENT_CATEGORY_ID
  INNER JOIN LOCATIONS L
  ON V.LOCATION_ID =L.LOCATION_ID
  INNER JOIN COUNTRIES C
  ON L.COUNTRY_ID = C.COUNTRY_ID
WHERE
  UPPER(E.EVENT_NAME) LIKE UPPER('%Stadium%')
  OR UPPER(V.VENUE_NAME) LIKE UPPER('%Stadium%')
  OR UPPER(P.PERFORMER_NAME) LIKE UPPER('%Stadium%')
  OR UPPER(EC.EVENT_CATEGORY_NAME) LIKE UPPER('%Stadium%')
  OR UPPER(L.LOCATION_NAME) LIKE UPPER('%Stadium%')
  OR UPPER(C.COUNTRY_NAME) LIKE UPPER('%Stadium%')
  SELECT
    E.EVENT_ID,
    E.EVENT_NAME,
    V.VENUE_NAME,
    P.PERFORMER_NAME,
    EC.EVENT_CATEGORY_NAME,
    L.LOCATION_NAME,
    C.COUNTRY_NAME
  FROM
    EVENTS E
    INNER JOIN VENUES V
    ON E.VENUE_ID = V.VENUE_ID
    INNER JOIN PERFORMERS P
    ON E.PERFORMER_ID = P.PERFORMER_ID
    INNER JOIN EVENT_CATEGORY EC
    ON E.EVENT_CATEGORY_ID = EC.EVENT_CATEGORY_ID
    INNER JOIN LOCATIONS L
    ON V.LOCATION_ID =L.LOCATION_ID
    INNER JOIN COUNTRIES C
    ON L.COUNTRY_ID = C.COUNTRY_ID
  WHERE
    UPPER(E.EVENT_NAME) LIKE UPPER('%Stadium%')
    OR UPPER(V.VENUE_NAME) LIKE UPPER('%Stadium%')
    OR UPPER(P.PERFORMER_NAME) LIKE UPPER('%Stadium%')
    OR UPPER(EC.EVENT_CATEGORY_NAME) LIKE UPPER('%Stadium%')
    OR UPPER(L.LOCATION_NAME) LIKE UPPER('%Stadium%')
    OR UPPER(C.COUNTRY_NAME) LIKE UPPER('%Stadium%');
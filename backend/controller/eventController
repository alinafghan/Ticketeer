
const {getConnection} = require('../config/connection');


module.exports = {
    removeAllEvents: async function (req, res){
        let connection ;
        try {
            connection = await getConnection();
            const query = "TRUNCATE TABLE events";
            const options={
                autoCommit: true, // Commit each insert immediately
            }
            await connection.execute(query ,[], options);
            // console.log(table.rows);
            res.status(202).send("Deleted");
          } catch (error) {
            console.error('Error executing SQL query:', error);
            res.status(500).send('Internal Server Error');
          } finally {
            if (connection) {
              try {
                // Release the connection when done
                await connection.close();
              } catch (error) {
                console.error('Error closing database connection:', error);
              }
            }
        }
    },
    populateEvents: async function (req, res){

        let connection ;
        try {

<<<<<<< Updated upstream
            // INSERT INTO Orders (person_id, desert_id, order_date, quantity)
            // VALUES (1, 1, '2023/09/15', 2); 

            connection = await getConnection();
            const dataOrder = [
                [1,10, 'e1','event'],
                [2,5, 'e2', 'event'],
                [3,2, 'e3','event'],
                [2,7, 'e4', 'event'],
                [4,10, 'e5', 'event'],
                [5,1, 'e6', 'event'],
            ];
            
            for (const EventData of dataOrder) {
                const queryEvent = `INSERT INTO events (id, eventid, eventname, eventdesc) VALUES (:1, :2, :3, :4)`;
                const bindsOrder = EventData; // Bind the OrderData array directly
                const optionsOrder = {
                  autoCommit: true, // Commit each insert immediately
                };
                // console.log(query , "aaa----------->>>>")
                await connection.execute(queryEvent,bindsOrder,optionsOrder);
              }

              res.status(202).send("Populated");
        } 
        catch (error) {
            console.error('Error executing SQL query:', error);
            res.status(500).send('Internal Server Error');
          
        } 
        finally {
            if (connection) {
              try {
                // Release the connection when done
                await connection.close();
              } catch (error) {
                console.error('Error closing database connection:', error);
              }
=======
          connection = await getConnection();
          const dataOrder = [
              // eventid,eventname,venueid,date,starttime,endtime,organizrid,performerid,eventcategoryid,numoftickets
             
              ['Strokes Concert', 1,'2023-10-31', '15:00:00', '18:00:00', 1, 1, 1, 7000]

             /* [1,'Bachelorette Party',2, '01-Oct-2010','9:00','6:00',3,4,1,500], 
              [2,'Met Gala',2, '01-Oct-2010', '9:00','6:00',3,4,2,500],
              [3,'Coachella',2, '01-Oct-2010','9:00','6:00',3,4,1,500],
              [2,'Kashmir Concert',2, '01-Oct-2010', '9:00','6:00',3,2,500],
              [4,'Eras Tour',2, '01-Oct-2010', '9:00','6:00',3,3,500],
              [5,'Lollapalooza',2, '01-Oct-2010', '9:00','6:00',3,3,500], */
          ];
          
          for (const EventData of dataOrder) {
              const queryEvent = `INSERT INTO events (event_id, event_name, venue_id,event_date,start_time,end_date,organizer_id,performer_id,event_category_id,num_of_tickets) VALUES (:1, :2, :3, :4, :5,:6, :7, :8, :9, :10)`;
              const bindsOrder = EventData; 
              const optionsOrder = {
                autoCommit: true, // Commit each insert immediately
              };
              // console.log(query , "aaa----------->>>>")
              await connection.execute(queryEvent,bindsOrder,optionsOrder);
>>>>>>> Stashed changes
            }
        }
    },

    /*GetWholeTable: async function  (req, res){
      
        let connection ;
        try {
            connection = await getConnection();
            const table = await connection.execute("SELECT * from events");
            //SELECT events.*,id , Deserts.deserts , Deserts.unit_price FROM (Orders join Person on Orders.person_id = Person.person_id) join Deserts on Orders.desert_id = Deserts.desert_id"
            // console.log(table.rows);
            res.status(200).send(table);
          } catch (error) {
            console.error('Error executing SQL query:', error);
            res.status(500).send('Internal Server Error');
          } finally {
            if (connection) {
              try {
                // Release the connection when done
                await connection.close();
              } catch (error) {
                console.error('Error closing database connection:', error);
              }
            }
        } 
        // return table; 
    
      }, */

      GetWholeTable: async function (req, res) {
        let connection;
        try {
          connection = await getConnection();
          const result = await connection.execute("SELECT * from events");
          const data = result.rows; // Get the data from the result
      
          res.status(200).send(data); // Send the data as the response
        } catch (error) {
          console.error('Error executing SQL query:', error);
          res.status(500).send('Internal Server Error');
        } finally {
          if (connection) {
            try {
              // Release the connection when done
              await connection.close();
            } catch (error) {
              console.error('Error closing database connection:', error);
            }
          }
        }
      },
      

    getEventwithCondition: async function (req, res) {
        let connection;
        try {
            connection = await getConnection();
            const query = `SELECT * from events WHERE ${req.body.condition}`;
            const binds = [req.body.condition];
            const table = await connection.execute(query, binds);
            res.status(200).send(table);
        } catch (error) {
            console.error('Error executing SQL query:', error);
            res.status(500).send('Internal Server Error');
        } finally {
            if (connection) {
                try {
                    await connection.close();
                } catch (error) {
                    console.error('Error closing database connection:', error);
                }
            }
        }
    },
    

    AddNewOrder: async function (req, res){
        let connection ;
        try {
            connection = await getConnection();
            const query = `INSERT INTO events (eventid, eventname, eventdesc) VALUES (:1, :2, :3, :4)`;
            const binds = [req.body.eventid, req.body.eventname, req.body.eventdesc];
            const options = {
              autoCommit: true, // Commit each insert immediately
            };
            // console.log(query , "aaa----------->>>>")
            await connection.execute(query,binds,options);
            res.status(202).send("Added");
        } 
        catch (error) {
            console.error('Error executing SQL query:', error);
            res.status(500).send('Internal Server Error');
          
        } 
        finally {
            if (connection) {
              try {
                // Release the connection when done
                await connection.close();
              } catch (error) {
                console.error('Error closing database connection:', error);
              }
            }
        }
    },

    UpdateEvent: async function (req, res) {
        let connection;
        try {
          connection = await getConnection();
          const binds = [
            req.body.eventid,
            req.body.eventname,
            req.body.eventdesc,
            req.body.id
          ];
      
          console.log("binds -> ", binds);
          const query = `UPDATE events SET eventid = :1, eventname = :2, eventdesc = :3 WHERE id = :4`;
          const options = {
            autoCommit: true, // Commit each insert immediately
          }
    
          const respnse = await connection.execute(query, binds, options);
  
      
          res.status(202).send("Updated");
        } catch (error) {
          console.error("Error executing SQL query:", error);
          res.status(500).send('Internal Server Error');
        } finally {
          if (connection) {
            try {
              // Release the connection when done
              await connection.close();
            } catch (error) {
              console.error('Error closing database connection:', error);
            }
          }
        }
      },
  
  
      DeleteOrderAtID : async function (req, res){
  
        let connection ;
        try{
          connection = await getConnection();
          const query = `Delete from events WHERE id = :1`;
          const binds = [req.body.id];
          const options = {
            autoCommit: true, // Commit each insert immediately
          };
  
          await connection.execute(query,binds,options);
          res.status(202).send("Deleted");
        }
        catch(error){
          console.log("Error executing SQL query:" ,error)
          res.status(500).send('Internal Server Error');
        }
        finally{
          if(connection){
            try{
              await connection.close();
            }
            catch(error){
              console.log("Error closing database connection:", error);
            }
          }
  
        }
  
      }
}
